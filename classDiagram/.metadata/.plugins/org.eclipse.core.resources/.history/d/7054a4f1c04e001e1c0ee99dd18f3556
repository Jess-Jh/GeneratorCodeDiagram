package generatorcode.views;

import abstractJJD.ModelFactoryAbstractJJD;
import concrete.ConcreteFactory;
import concrete.ModelFactoryConcreteJJD;

public class ModelFactoryModel {
	
	//------------------------------  Singleton ------------------------------------------------
		// Clase estatica oculta. Tan solo se instanciara el singleton una vez
		private static class SingletonHolder { 
			// El constructor de Singleton puede ser llamado desde aquí al ser protected
			private final static ModelFactoryModel eINSTANCE = new ModelFactoryModel();
		}

		// Método para obtener la instancia de nuestra clase
		public static ModelFactoryModel getInstance() {
			return SingletonHolder.eINSTANCE;
		}
		//------------------------------  Singleton ------------------------------------------------
		ModelFactoryConcreteJJD modelFactoryConcrete = ConcreteFactory.eINSTANCE.createModelFactoryConcreteJJD();
		ModelFactoryAbstractJJD modelFactoryAbstract = ConcreteFactory.eINSTANCE.createModelFactoryAbstractJJD();

		public ModelFactoryModel() {
			// TODO Auto-generated constructor stub

			ModelFactory tempModelFactory = modelFactory;

			modelFactory = cargar();

			if ( modelFactory == null ){
				modelFactory = tempModelFactory;

			}
		}

		public ModelFactory cargar() {
			ModelFactory modelFactory = null;

			ConcretaPackage whoownmePackage =  ConcretaPackage.eINSTANCE;
			org.eclipse.emf.ecore.resource.ResourceSet resourceSet = new org.eclipse.emf.ecore.resource.impl.ResourceSetImpl();

			
			org.eclipse.emf.common.util.URI uri = org.eclipse.emf.common.util.URI.createURI("platform:/resource/test/src/model/model.concreta");

			org.eclipse.emf.ecore.resource.Resource resource = resourceSet.createResource(uri);

			try {
				resource.load(null);
				modelFactory = (ModelFactory)resource.getContents().get(0);
				System.out.println("loaded: " + modelFactory);
			}
			catch (java.io.IOException e) {
				System.out.println("failed to read " + uri); 		
				System.out.println(e);
			}
			return modelFactory;


}
