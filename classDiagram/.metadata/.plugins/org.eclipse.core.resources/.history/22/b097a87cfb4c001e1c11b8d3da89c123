	/*
 * 
 */
package concrete.diagram.part;

	/**
 * @generated
 */
public class ConcreteDiagramUpdater {
		
	/**
 * @generated
 */
public static boolean isShortcutOrphaned(org.eclipse.gmf.runtime.notation.View view) {
	return !view.isSetElement() || view.getElement() == null || view.getElement().eIsProxy();
}
	
		/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		switch (concrete.diagram.part.ConcreteVisualIDRegistry.getVisualID(view)) {
		case concrete.diagram.edit.parts.ClassDiagramJJDEditPart.VISUAL_ID:
	return getClassDiagramJJD_1000SemanticChildren(view);
case concrete.diagram.edit.parts.PackageJJDPackageJJDSubPackagesJJDCompartmentEditPart.VISUAL_ID:
	return getPackageJJDPackageJJDSubPackagesJJDCompartment_7001SemanticChildren(view);
case concrete.diagram.edit.parts.PackageJJDPackageJJDListClassJJDCompartmentEditPart.VISUAL_ID:
	return getPackageJJDPackageJJDListClassJJDCompartment_7002SemanticChildren(view);
case concrete.diagram.edit.parts.PackageJJDPackageJJDSubPackagesJJDCompartment2EditPart.VISUAL_ID:
	return getPackageJJDPackageJJDSubPackagesJJDCompartment_7003SemanticChildren(view);
case concrete.diagram.edit.parts.PackageJJDPackageJJDListClassJJDCompartment2EditPart.VISUAL_ID:
	return getPackageJJDPackageJJDListClassJJDCompartment_7004SemanticChildren(view);
case concrete.diagram.edit.parts.ClassJJDClassJJDListAttributesJJDCompartmentEditPart.VISUAL_ID:
	return getClassJJDClassJJDListAttributesJJDCompartment_7005SemanticChildren(view);
case concrete.diagram.edit.parts.ClassJJDClassJJDListMethodsJJDCompartmentEditPart.VISUAL_ID:
	return getClassJJDClassJJDListMethodsJJDCompartment_7006SemanticChildren(view);
case concrete.diagram.edit.parts.MethodJJDMethodJJDListAttributesJJDCompartmentEditPart.VISUAL_ID:
	return getMethodJJDMethodJJDListAttributesJJDCompartment_7007SemanticChildren(view);
case concrete.diagram.edit.parts.ClassJJDClassJJDListAttributesJJDCompartment2EditPart.VISUAL_ID:
	return getClassJJDClassJJDListAttributesJJDCompartment_7008SemanticChildren(view);
case concrete.diagram.edit.parts.ClassJJDClassJJDListMethodsJJDCompartment2EditPart.VISUAL_ID:
	return getClassJJDClassJJDListMethodsJJDCompartment_7009SemanticChildren(view);
	}
		return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteNodeDescriptor> getClassDiagramJJD_1000SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
concrete.ClassDiagramJJD modelElement = (concrete.ClassDiagramJJD) view.getElement();
	java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getListPackagesJJD().iterator(); it.hasNext();) {
		concrete.PackageJJD childElement = (concrete.PackageJJD) it.next();
					int visualID = concrete.diagram.part.ConcreteVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == concrete.diagram.edit.parts.PackageJJDEditPart.VISUAL_ID) {
	result.add(new concrete.diagram.part.ConcreteNodeDescriptor(childElement, visualID));
	continue;
}
	}
						for (java.util.Iterator<?> it = modelElement.getListClassJJD().iterator(); it.hasNext();) {
		concrete.ClassJJD childElement = (concrete.ClassJJD) it.next();
					int visualID = concrete.diagram.part.ConcreteVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == concrete.diagram.edit.parts.ClassJJDEditPart.VISUAL_ID) {
	result.add(new concrete.diagram.part.ConcreteNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteNodeDescriptor> getPackageJJDPackageJJDSubPackagesJJDCompartment_7001SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
concrete.PackageJJD modelElement = (concrete.PackageJJD) containerView.getElement();
	java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getSubPackagesJJD().iterator(); it.hasNext();) {
		concrete.PackageJJD childElement = (concrete.PackageJJD) it.next();
					int visualID = concrete.diagram.part.ConcreteVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == concrete.diagram.edit.parts.PackageJJD2EditPart.VISUAL_ID) {
	result.add(new concrete.diagram.part.ConcreteNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteNodeDescriptor> getPackageJJDPackageJJDListClassJJDCompartment_7002SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
concrete.PackageJJD modelElement = (concrete.PackageJJD) containerView.getElement();
	java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getListClassJJD().iterator(); it.hasNext();) {
		concrete.ClassJJD childElement = (concrete.ClassJJD) it.next();
					int visualID = concrete.diagram.part.ConcreteVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == concrete.diagram.edit.parts.ClassJJD2EditPart.VISUAL_ID) {
	result.add(new concrete.diagram.part.ConcreteNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteNodeDescriptor> getPackageJJDPackageJJDSubPackagesJJDCompartment_7003SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
concrete.PackageJJD modelElement = (concrete.PackageJJD) containerView.getElement();
	java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getSubPackagesJJD().iterator(); it.hasNext();) {
		concrete.PackageJJD childElement = (concrete.PackageJJD) it.next();
					int visualID = concrete.diagram.part.ConcreteVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == concrete.diagram.edit.parts.PackageJJD2EditPart.VISUAL_ID) {
	result.add(new concrete.diagram.part.ConcreteNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteNodeDescriptor> getPackageJJDPackageJJDListClassJJDCompartment_7004SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
concrete.PackageJJD modelElement = (concrete.PackageJJD) containerView.getElement();
	java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getListClassJJD().iterator(); it.hasNext();) {
		concrete.ClassJJD childElement = (concrete.ClassJJD) it.next();
					int visualID = concrete.diagram.part.ConcreteVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == concrete.diagram.edit.parts.ClassJJD2EditPart.VISUAL_ID) {
	result.add(new concrete.diagram.part.ConcreteNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteNodeDescriptor> getClassJJDClassJJDListAttributesJJDCompartment_7005SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
concrete.ClassJJD modelElement = (concrete.ClassJJD) containerView.getElement();
	java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getListAttributesJJD().iterator(); it.hasNext();) {
		concrete.AttributeJJD childElement = (concrete.AttributeJJD) it.next();
					int visualID = concrete.diagram.part.ConcreteVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == concrete.diagram.edit.parts.AttributeJJDEditPart.VISUAL_ID) {
	result.add(new concrete.diagram.part.ConcreteNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteNodeDescriptor> getClassJJDClassJJDListMethodsJJDCompartment_7006SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
concrete.ClassJJD modelElement = (concrete.ClassJJD) containerView.getElement();
	java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getListMethodsJJD().iterator(); it.hasNext();) {
		concrete.MethodJJD childElement = (concrete.MethodJJD) it.next();
					int visualID = concrete.diagram.part.ConcreteVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == concrete.diagram.edit.parts.MethodJJDEditPart.VISUAL_ID) {
	result.add(new concrete.diagram.part.ConcreteNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteNodeDescriptor> getMethodJJDMethodJJDListAttributesJJDCompartment_7007SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
concrete.MethodJJD modelElement = (concrete.MethodJJD) containerView.getElement();
	java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getListAttributesJJD().iterator(); it.hasNext();) {
		concrete.AttributeJJD childElement = (concrete.AttributeJJD) it.next();
					int visualID = concrete.diagram.part.ConcreteVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == concrete.diagram.edit.parts.AttributeJJD2EditPart.VISUAL_ID) {
	result.add(new concrete.diagram.part.ConcreteNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteNodeDescriptor> getClassJJDClassJJDListAttributesJJDCompartment_7008SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
concrete.ClassJJD modelElement = (concrete.ClassJJD) containerView.getElement();
	java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getListAttributesJJD().iterator(); it.hasNext();) {
		concrete.AttributeJJD childElement = (concrete.AttributeJJD) it.next();
					int visualID = concrete.diagram.part.ConcreteVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == concrete.diagram.edit.parts.AttributeJJDEditPart.VISUAL_ID) {
	result.add(new concrete.diagram.part.ConcreteNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteNodeDescriptor> getClassJJDClassJJDListMethodsJJDCompartment_7009SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
concrete.ClassJJD modelElement = (concrete.ClassJJD) containerView.getElement();
	java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getListMethodsJJD().iterator(); it.hasNext();) {
		concrete.MethodJJD childElement = (concrete.MethodJJD) it.next();
					int visualID = concrete.diagram.part.ConcreteVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == concrete.diagram.edit.parts.MethodJJDEditPart.VISUAL_ID) {
	result.add(new concrete.diagram.part.ConcreteNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}
	
		/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (concrete.diagram.part.ConcreteVisualIDRegistry.getVisualID(view)) {
		case concrete.diagram.edit.parts.ClassDiagramJJDEditPart.VISUAL_ID:
	return getClassDiagramJJD_1000ContainedLinks(view);
case concrete.diagram.edit.parts.PackageJJDEditPart.VISUAL_ID:
	return getPackageJJD_2001ContainedLinks(view);
case concrete.diagram.edit.parts.ClassJJDEditPart.VISUAL_ID:
	return getClassJJD_2002ContainedLinks(view);
case concrete.diagram.edit.parts.PackageJJD2EditPart.VISUAL_ID:
	return getPackageJJD_3001ContainedLinks(view);
case concrete.diagram.edit.parts.ClassJJD2EditPart.VISUAL_ID:
	return getClassJJD_3002ContainedLinks(view);
case concrete.diagram.edit.parts.AttributeJJDEditPart.VISUAL_ID:
	return getAttributeJJD_3003ContainedLinks(view);
case concrete.diagram.edit.parts.MethodJJDEditPart.VISUAL_ID:
	return getMethodJJD_3004ContainedLinks(view);
case concrete.diagram.edit.parts.AttributeJJD2EditPart.VISUAL_ID:
	return getAttributeJJD_3005ContainedLinks(view);
case concrete.diagram.edit.parts.AgregationJJDEditPart.VISUAL_ID:
	return getAgregationJJD_4001ContainedLinks(view);
case concrete.diagram.edit.parts.InheritanceJJDEditPart.VISUAL_ID:
	return getInheritanceJJD_4002ContainedLinks(view);
case concrete.diagram.edit.parts.ContainmentJJDEditPart.VISUAL_ID:
	return getContainmentJJD_4003ContainedLinks(view);
case concrete.diagram.edit.parts.AssociationJJDEditPart.VISUAL_ID:
	return getAssociationJJD_4004ContainedLinks(view);
case concrete.diagram.edit.parts.ImplementJJDEditPart.VISUAL_ID:
	return getImplementJJD_4005ContainedLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (concrete.diagram.part.ConcreteVisualIDRegistry.getVisualID(view)) {
		case concrete.diagram.edit.parts.PackageJJDEditPart.VISUAL_ID:
	return getPackageJJD_2001IncomingLinks(view);
case concrete.diagram.edit.parts.ClassJJDEditPart.VISUAL_ID:
	return getClassJJD_2002IncomingLinks(view);
case concrete.diagram.edit.parts.PackageJJD2EditPart.VISUAL_ID:
	return getPackageJJD_3001IncomingLinks(view);
case concrete.diagram.edit.parts.ClassJJD2EditPart.VISUAL_ID:
	return getClassJJD_3002IncomingLinks(view);
case concrete.diagram.edit.parts.AttributeJJDEditPart.VISUAL_ID:
	return getAttributeJJD_3003IncomingLinks(view);
case concrete.diagram.edit.parts.MethodJJDEditPart.VISUAL_ID:
	return getMethodJJD_3004IncomingLinks(view);
case concrete.diagram.edit.parts.AttributeJJD2EditPart.VISUAL_ID:
	return getAttributeJJD_3005IncomingLinks(view);
case concrete.diagram.edit.parts.AgregationJJDEditPart.VISUAL_ID:
	return getAgregationJJD_4001IncomingLinks(view);
case concrete.diagram.edit.parts.InheritanceJJDEditPart.VISUAL_ID:
	return getInheritanceJJD_4002IncomingLinks(view);
case concrete.diagram.edit.parts.ContainmentJJDEditPart.VISUAL_ID:
	return getContainmentJJD_4003IncomingLinks(view);
case concrete.diagram.edit.parts.AssociationJJDEditPart.VISUAL_ID:
	return getAssociationJJD_4004IncomingLinks(view);
case concrete.diagram.edit.parts.ImplementJJDEditPart.VISUAL_ID:
	return getImplementJJD_4005IncomingLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (concrete.diagram.part.ConcreteVisualIDRegistry.getVisualID(view)) {
		case concrete.diagram.edit.parts.PackageJJDEditPart.VISUAL_ID:
	return getPackageJJD_2001OutgoingLinks(view);
case concrete.diagram.edit.parts.ClassJJDEditPart.VISUAL_ID:
	return getClassJJD_2002OutgoingLinks(view);
case concrete.diagram.edit.parts.PackageJJD2EditPart.VISUAL_ID:
	return getPackageJJD_3001OutgoingLinks(view);
case concrete.diagram.edit.parts.ClassJJD2EditPart.VISUAL_ID:
	return getClassJJD_3002OutgoingLinks(view);
case concrete.diagram.edit.parts.AttributeJJDEditPart.VISUAL_ID:
	return getAttributeJJD_3003OutgoingLinks(view);
case concrete.diagram.edit.parts.MethodJJDEditPart.VISUAL_ID:
	return getMethodJJD_3004OutgoingLinks(view);
case concrete.diagram.edit.parts.AttributeJJD2EditPart.VISUAL_ID:
	return getAttributeJJD_3005OutgoingLinks(view);
case concrete.diagram.edit.parts.AgregationJJDEditPart.VISUAL_ID:
	return getAgregationJJD_4001OutgoingLinks(view);
case concrete.diagram.edit.parts.InheritanceJJDEditPart.VISUAL_ID:
	return getInheritanceJJD_4002OutgoingLinks(view);
case concrete.diagram.edit.parts.ContainmentJJDEditPart.VISUAL_ID:
	return getContainmentJJD_4003OutgoingLinks(view);
case concrete.diagram.edit.parts.AssociationJJDEditPart.VISUAL_ID:
	return getAssociationJJD_4004OutgoingLinks(view);
case concrete.diagram.edit.parts.ImplementJJDEditPart.VISUAL_ID:
	return getImplementJJD_4005OutgoingLinks(view);
	}
		return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getClassDiagramJJD_1000ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	concrete.ClassDiagramJJD modelElement = (concrete.ClassDiagramJJD) view.getElement();
		java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
		result.addAll(getContainedTypeModelFacetLinks_AgregationJJD_4001(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_InheritanceJJD_4002(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_ContainmentJJD_4003(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_AssociationJJD_4004(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_ImplementJJD_4005(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getPackageJJD_2001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getClassJJD_2002ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getPackageJJD_3001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getClassJJD_3002ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getAttributeJJD_3003ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getMethodJJD_3004ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getAttributeJJD_3005ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getAgregationJJD_4001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getInheritanceJJD_4002ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getContainmentJJD_4003ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getAssociationJJD_4004ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getImplementJJD_4005ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getPackageJJD_2001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getClassJJD_2002IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	concrete.ClassJJD modelElement = (concrete.ClassJJD) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_AgregationJJD_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_InheritanceJJD_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ContainmentJJD_4003(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_AssociationJJD_4004(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ImplementJJD_4005(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getPackageJJD_3001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getClassJJD_3002IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	concrete.ClassJJD modelElement = (concrete.ClassJJD) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_AgregationJJD_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_InheritanceJJD_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ContainmentJJD_4003(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_AssociationJJD_4004(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ImplementJJD_4005(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getAttributeJJD_3003IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getMethodJJD_3004IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getAttributeJJD_3005IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getAgregationJJD_4001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getInheritanceJJD_4002IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getContainmentJJD_4003IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getAssociationJJD_4004IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getImplementJJD_4005IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getPackageJJD_2001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getClassJJD_2002OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	concrete.ClassJJD modelElement = (concrete.ClassJJD) view.getElement();
		java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_AgregationJJD_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_InheritanceJJD_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ContainmentJJD_4003(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_AssociationJJD_4004(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ImplementJJD_4005(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getPackageJJD_3001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getClassJJD_3002OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	concrete.ClassJJD modelElement = (concrete.ClassJJD) view.getElement();
		java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_AgregationJJD_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_InheritanceJJD_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ContainmentJJD_4003(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_AssociationJJD_4004(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ImplementJJD_4005(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getAttributeJJD_3003OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getMethodJJD_3004OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getAttributeJJD_3005OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getAgregationJJD_4001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getInheritanceJJD_4002OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getContainmentJJD_4003OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getAssociationJJD_4004OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getImplementJJD_4005OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
private static java.util.Collection<concrete.diagram.part.ConcreteLinkDescriptor> getContainedTypeModelFacetLinks_AgregationJJD_4001(concrete.ClassDiagramJJD container) {
	java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getListRelationsJJD().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof concrete.AgregationJJD) {
		continue;
	}
	concrete.AgregationJJD link = (concrete.AgregationJJD) linkObject;
		if (concrete.diagram.edit.parts.AgregationJJDEditPart.VISUAL_ID != concrete.diagram.part.ConcreteVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			concrete.ClassJJD dst = link.getTarget();
							concrete.ClassJJD src = link.getSource();
							result.add(new concrete.diagram.part.ConcreteLinkDescriptor(src, dst, link, concrete.diagram.providers.ConcreteElementTypes.AgregationJJD_4001, concrete.diagram.edit.parts.AgregationJJDEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<concrete.diagram.part.ConcreteLinkDescriptor> getContainedTypeModelFacetLinks_InheritanceJJD_4002(concrete.ClassDiagramJJD container) {
	java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getListRelationsJJD().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof concrete.InheritanceJJD) {
		continue;
	}
	concrete.InheritanceJJD link = (concrete.InheritanceJJD) linkObject;
		if (concrete.diagram.edit.parts.InheritanceJJDEditPart.VISUAL_ID != concrete.diagram.part.ConcreteVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			concrete.ClassJJD dst = link.getTarget();
							concrete.ClassJJD src = link.getSource();
							result.add(new concrete.diagram.part.ConcreteLinkDescriptor(src, dst, link, concrete.diagram.providers.ConcreteElementTypes.InheritanceJJD_4002, concrete.diagram.edit.parts.InheritanceJJDEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<concrete.diagram.part.ConcreteLinkDescriptor> getContainedTypeModelFacetLinks_ContainmentJJD_4003(concrete.ClassDiagramJJD container) {
	java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getListRelationsJJD().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof concrete.ContainmentJJD) {
		continue;
	}
	concrete.ContainmentJJD link = (concrete.ContainmentJJD) linkObject;
		if (concrete.diagram.edit.parts.ContainmentJJDEditPart.VISUAL_ID != concrete.diagram.part.ConcreteVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			concrete.ClassJJD dst = link.getTarget();
							concrete.ClassJJD src = link.getSource();
							result.add(new concrete.diagram.part.ConcreteLinkDescriptor(src, dst, link, concrete.diagram.providers.ConcreteElementTypes.ContainmentJJD_4003, concrete.diagram.edit.parts.ContainmentJJDEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<concrete.diagram.part.ConcreteLinkDescriptor> getContainedTypeModelFacetLinks_AssociationJJD_4004(concrete.ClassDiagramJJD container) {
	java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getListRelationsJJD().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof concrete.AssociationJJD) {
		continue;
	}
	concrete.AssociationJJD link = (concrete.AssociationJJD) linkObject;
		if (concrete.diagram.edit.parts.AssociationJJDEditPart.VISUAL_ID != concrete.diagram.part.ConcreteVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			concrete.ClassJJD dst = link.getTarget();
							concrete.ClassJJD src = link.getSource();
							result.add(new concrete.diagram.part.ConcreteLinkDescriptor(src, dst, link, concrete.diagram.providers.ConcreteElementTypes.AssociationJJD_4004, concrete.diagram.edit.parts.AssociationJJDEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<concrete.diagram.part.ConcreteLinkDescriptor> getContainedTypeModelFacetLinks_ImplementJJD_4005(concrete.ClassDiagramJJD container) {
	java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getListRelationsJJD().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof concrete.ImplementJJD) {
		continue;
	}
	concrete.ImplementJJD link = (concrete.ImplementJJD) linkObject;
		if (concrete.diagram.edit.parts.ImplementJJDEditPart.VISUAL_ID != concrete.diagram.part.ConcreteVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			concrete.ClassJJD dst = link.getTarget();
							concrete.ClassJJD src = link.getSource();
							result.add(new concrete.diagram.part.ConcreteLinkDescriptor(src, dst, link, concrete.diagram.providers.ConcreteElementTypes.ImplementJJD_4005, concrete.diagram.edit.parts.ImplementJJDEditPart.VISUAL_ID));
		}
	return result;	
}
	
/**
 * @generated
 */
private static java.util.Collection<concrete.diagram.part.ConcreteLinkDescriptor> getIncomingTypeModelFacetLinks_AgregationJJD_4001(concrete.ClassJJD target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != concrete.ConcretePackage.eINSTANCE.getRelationJJD_Target() || false == setting.getEObject() instanceof concrete.AgregationJJD) {
	continue;
}
concrete.AgregationJJD link = (concrete.AgregationJJD) setting.getEObject();
	if (concrete.diagram.edit.parts.AgregationJJDEditPart.VISUAL_ID != concrete.diagram.part.ConcreteVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				concrete.ClassJJD src = link.getSource();
			result.add(new concrete.diagram.part.ConcreteLinkDescriptor(src, target, link, concrete.diagram.providers.ConcreteElementTypes.AgregationJJD_4001, concrete.diagram.edit.parts.AgregationJJDEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<concrete.diagram.part.ConcreteLinkDescriptor> getIncomingTypeModelFacetLinks_InheritanceJJD_4002(concrete.ClassJJD target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != concrete.ConcretePackage.eINSTANCE.getRelationJJD_Target() || false == setting.getEObject() instanceof concrete.InheritanceJJD) {
	continue;
}
concrete.InheritanceJJD link = (concrete.InheritanceJJD) setting.getEObject();
	if (concrete.diagram.edit.parts.InheritanceJJDEditPart.VISUAL_ID != concrete.diagram.part.ConcreteVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				concrete.ClassJJD src = link.getSource();
			result.add(new concrete.diagram.part.ConcreteLinkDescriptor(src, target, link, concrete.diagram.providers.ConcreteElementTypes.InheritanceJJD_4002, concrete.diagram.edit.parts.InheritanceJJDEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<concrete.diagram.part.ConcreteLinkDescriptor> getIncomingTypeModelFacetLinks_ContainmentJJD_4003(concrete.ClassJJD target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != concrete.ConcretePackage.eINSTANCE.getRelationJJD_Target() || false == setting.getEObject() instanceof concrete.ContainmentJJD) {
	continue;
}
concrete.ContainmentJJD link = (concrete.ContainmentJJD) setting.getEObject();
	if (concrete.diagram.edit.parts.ContainmentJJDEditPart.VISUAL_ID != concrete.diagram.part.ConcreteVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				concrete.ClassJJD src = link.getSource();
			result.add(new concrete.diagram.part.ConcreteLinkDescriptor(src, target, link, concrete.diagram.providers.ConcreteElementTypes.ContainmentJJD_4003, concrete.diagram.edit.parts.ContainmentJJDEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<concrete.diagram.part.ConcreteLinkDescriptor> getIncomingTypeModelFacetLinks_AssociationJJD_4004(concrete.ClassJJD target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != concrete.ConcretePackage.eINSTANCE.getRelationJJD_Target() || false == setting.getEObject() instanceof concrete.AssociationJJD) {
	continue;
}
concrete.AssociationJJD link = (concrete.AssociationJJD) setting.getEObject();
	if (concrete.diagram.edit.parts.AssociationJJDEditPart.VISUAL_ID != concrete.diagram.part.ConcreteVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				concrete.ClassJJD src = link.getSource();
			result.add(new concrete.diagram.part.ConcreteLinkDescriptor(src, target, link, concrete.diagram.providers.ConcreteElementTypes.AssociationJJD_4004, concrete.diagram.edit.parts.AssociationJJDEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<concrete.diagram.part.ConcreteLinkDescriptor> getIncomingTypeModelFacetLinks_ImplementJJD_4005(concrete.ClassJJD target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != concrete.ConcretePackage.eINSTANCE.getRelationJJD_Target() || false == setting.getEObject() instanceof concrete.ImplementJJD) {
	continue;
}
concrete.ImplementJJD link = (concrete.ImplementJJD) setting.getEObject();
	if (concrete.diagram.edit.parts.ImplementJJDEditPart.VISUAL_ID != concrete.diagram.part.ConcreteVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				concrete.ClassJJD src = link.getSource();
			result.add(new concrete.diagram.part.ConcreteLinkDescriptor(src, target, link, concrete.diagram.providers.ConcreteElementTypes.ImplementJJD_4005, concrete.diagram.edit.parts.ImplementJJDEditPart.VISUAL_ID));
		}
	return result;	
}
				
		/**
 * @generated
 */
private static java.util.Collection<concrete.diagram.part.ConcreteLinkDescriptor> getOutgoingTypeModelFacetLinks_AgregationJJD_4001(concrete.ClassJJD source) {
	concrete.ClassDiagramJJD container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof concrete.ClassDiagramJJD) {
			container = (concrete.ClassDiagramJJD) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getListRelationsJJD().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof concrete.AgregationJJD) {
		continue;
	}
	concrete.AgregationJJD link = (concrete.AgregationJJD) linkObject;
		if (concrete.diagram.edit.parts.AgregationJJDEditPart.VISUAL_ID != concrete.diagram.part.ConcreteVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			concrete.ClassJJD dst = link.getTarget();
							concrete.ClassJJD src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new concrete.diagram.part.ConcreteLinkDescriptor(src, dst, link, concrete.diagram.providers.ConcreteElementTypes.AgregationJJD_4001, concrete.diagram.edit.parts.AgregationJJDEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<concrete.diagram.part.ConcreteLinkDescriptor> getOutgoingTypeModelFacetLinks_InheritanceJJD_4002(concrete.ClassJJD source) {
	concrete.ClassDiagramJJD container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof concrete.ClassDiagramJJD) {
			container = (concrete.ClassDiagramJJD) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getListRelationsJJD().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof concrete.InheritanceJJD) {
		continue;
	}
	concrete.InheritanceJJD link = (concrete.InheritanceJJD) linkObject;
		if (concrete.diagram.edit.parts.InheritanceJJDEditPart.VISUAL_ID != concrete.diagram.part.ConcreteVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			concrete.ClassJJD dst = link.getTarget();
							concrete.ClassJJD src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new concrete.diagram.part.ConcreteLinkDescriptor(src, dst, link, concrete.diagram.providers.ConcreteElementTypes.InheritanceJJD_4002, concrete.diagram.edit.parts.InheritanceJJDEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<concrete.diagram.part.ConcreteLinkDescriptor> getOutgoingTypeModelFacetLinks_ContainmentJJD_4003(concrete.ClassJJD source) {
	concrete.ClassDiagramJJD container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof concrete.ClassDiagramJJD) {
			container = (concrete.ClassDiagramJJD) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getListRelationsJJD().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof concrete.ContainmentJJD) {
		continue;
	}
	concrete.ContainmentJJD link = (concrete.ContainmentJJD) linkObject;
		if (concrete.diagram.edit.parts.ContainmentJJDEditPart.VISUAL_ID != concrete.diagram.part.ConcreteVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			concrete.ClassJJD dst = link.getTarget();
							concrete.ClassJJD src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new concrete.diagram.part.ConcreteLinkDescriptor(src, dst, link, concrete.diagram.providers.ConcreteElementTypes.ContainmentJJD_4003, concrete.diagram.edit.parts.ContainmentJJDEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<concrete.diagram.part.ConcreteLinkDescriptor> getOutgoingTypeModelFacetLinks_AssociationJJD_4004(concrete.ClassJJD source) {
	concrete.ClassDiagramJJD container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof concrete.ClassDiagramJJD) {
			container = (concrete.ClassDiagramJJD) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getListRelationsJJD().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof concrete.AssociationJJD) {
		continue;
	}
	concrete.AssociationJJD link = (concrete.AssociationJJD) linkObject;
		if (concrete.diagram.edit.parts.AssociationJJDEditPart.VISUAL_ID != concrete.diagram.part.ConcreteVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			concrete.ClassJJD dst = link.getTarget();
							concrete.ClassJJD src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new concrete.diagram.part.ConcreteLinkDescriptor(src, dst, link, concrete.diagram.providers.ConcreteElementTypes.AssociationJJD_4004, concrete.diagram.edit.parts.AssociationJJDEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<concrete.diagram.part.ConcreteLinkDescriptor> getOutgoingTypeModelFacetLinks_ImplementJJD_4005(concrete.ClassJJD source) {
	concrete.ClassDiagramJJD container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof concrete.ClassDiagramJJD) {
			container = (concrete.ClassDiagramJJD) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor> result = new java.util.LinkedList<concrete.diagram.part.ConcreteLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getListRelationsJJD().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof concrete.ImplementJJD) {
		continue;
	}
	concrete.ImplementJJD link = (concrete.ImplementJJD) linkObject;
		if (concrete.diagram.edit.parts.ImplementJJDEditPart.VISUAL_ID != concrete.diagram.part.ConcreteVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			concrete.ClassJJD dst = link.getTarget();
							concrete.ClassJJD src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new concrete.diagram.part.ConcreteLinkDescriptor(src, dst, link, concrete.diagram.providers.ConcreteElementTypes.ImplementJJD_4005, concrete.diagram.edit.parts.ImplementJJDEditPart.VISUAL_ID));
		}
	return result;	
}		
		
					/**
 * @generated
 */
	public static final org.eclipse.gmf.tooling.runtime.update.DiagramUpdater TYPED_INSTANCE = new org.eclipse.gmf.tooling.runtime.update.DiagramUpdater() {
				/**
 * @generated
 */
		@Override

		public java.util.List<concrete.diagram.part.ConcreteNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
			return ConcreteDiagramUpdater.getSemanticChildren(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
			return ConcreteDiagramUpdater.getContainedLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return ConcreteDiagramUpdater.getIncomingLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<concrete.diagram.part.ConcreteLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return ConcreteDiagramUpdater.getOutgoingLinks(view);
		}
	}; 
			
	}
