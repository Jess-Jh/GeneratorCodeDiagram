/**
 */
package concrete.provider;

import concrete.util.ConcreteAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ConcreteItemProviderAdapterFactory extends ConcreteAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ConcreteItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link concrete.ModelFactoryConcreteJJD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelFactoryConcreteJJDItemProvider modelFactoryConcreteJJDItemProvider;

	/**
	 * This creates an adapter for a {@link concrete.ModelFactoryConcreteJJD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelFactoryConcreteJJDAdapter() {
		if (modelFactoryConcreteJJDItemProvider == null) {
			modelFactoryConcreteJJDItemProvider = new ModelFactoryConcreteJJDItemProvider(this);
		}

		return modelFactoryConcreteJJDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concrete.ClassDiagramJJD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassDiagramJJDItemProvider classDiagramJJDItemProvider;

	/**
	 * This creates an adapter for a {@link concrete.ClassDiagramJJD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassDiagramJJDAdapter() {
		if (classDiagramJJDItemProvider == null) {
			classDiagramJJDItemProvider = new ClassDiagramJJDItemProvider(this);
		}

		return classDiagramJJDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concrete.PackageJJD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PackageJJDItemProvider packageJJDItemProvider;

	/**
	 * This creates an adapter for a {@link concrete.PackageJJD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPackageJJDAdapter() {
		if (packageJJDItemProvider == null) {
			packageJJDItemProvider = new PackageJJDItemProvider(this);
		}

		return packageJJDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concrete.ClassJJD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassJJDItemProvider classJJDItemProvider;

	/**
	 * This creates an adapter for a {@link concrete.ClassJJD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassJJDAdapter() {
		if (classJJDItemProvider == null) {
			classJJDItemProvider = new ClassJJDItemProvider(this);
		}

		return classJJDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concrete.AttributeJJD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeJJDItemProvider attributeJJDItemProvider;

	/**
	 * This creates an adapter for a {@link concrete.AttributeJJD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeJJDAdapter() {
		if (attributeJJDItemProvider == null) {
			attributeJJDItemProvider = new AttributeJJDItemProvider(this);
		}

		return attributeJJDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concrete.MethodJJD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodJJDItemProvider methodJJDItemProvider;

	/**
	 * This creates an adapter for a {@link concrete.MethodJJD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodJJDAdapter() {
		if (methodJJDItemProvider == null) {
			methodJJDItemProvider = new MethodJJDItemProvider(this);
		}

		return methodJJDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concrete.RelationJJD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationJJDItemProvider relationJJDItemProvider;

	/**
	 * This creates an adapter for a {@link concrete.RelationJJD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationJJDAdapter() {
		if (relationJJDItemProvider == null) {
			relationJJDItemProvider = new RelationJJDItemProvider(this);
		}

		return relationJJDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concrete.AgregationJJD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgregationJJDItemProvider agregationJJDItemProvider;

	/**
	 * This creates an adapter for a {@link concrete.AgregationJJD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgregationJJDAdapter() {
		if (agregationJJDItemProvider == null) {
			agregationJJDItemProvider = new AgregationJJDItemProvider(this);
		}

		return agregationJJDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concrete.InheritanceJJD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InheritanceJJDItemProvider inheritanceJJDItemProvider;

	/**
	 * This creates an adapter for a {@link concrete.InheritanceJJD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInheritanceJJDAdapter() {
		if (inheritanceJJDItemProvider == null) {
			inheritanceJJDItemProvider = new InheritanceJJDItemProvider(this);
		}

		return inheritanceJJDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concrete.ContainmentJJD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainmentJJDItemProvider containmentJJDItemProvider;

	/**
	 * This creates an adapter for a {@link concrete.ContainmentJJD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainmentJJDAdapter() {
		if (containmentJJDItemProvider == null) {
			containmentJJDItemProvider = new ContainmentJJDItemProvider(this);
		}

		return containmentJJDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concrete.AssociationJJD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationJJDItemProvider associationJJDItemProvider;

	/**
	 * This creates an adapter for a {@link concrete.AssociationJJD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationJJDAdapter() {
		if (associationJJDItemProvider == null) {
			associationJJDItemProvider = new AssociationJJDItemProvider(this);
		}

		return associationJJDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link concrete.ImplementJJD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplementJJDItemProvider implementJJDItemProvider;

	/**
	 * This creates an adapter for a {@link concrete.ImplementJJD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImplementJJDAdapter() {
		if (implementJJDItemProvider == null) {
			implementJJDItemProvider = new ImplementJJDItemProvider(this);
		}

		return implementJJDItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (modelFactoryConcreteJJDItemProvider != null) modelFactoryConcreteJJDItemProvider.dispose();
		if (classDiagramJJDItemProvider != null) classDiagramJJDItemProvider.dispose();
		if (packageJJDItemProvider != null) packageJJDItemProvider.dispose();
		if (classJJDItemProvider != null) classJJDItemProvider.dispose();
		if (attributeJJDItemProvider != null) attributeJJDItemProvider.dispose();
		if (methodJJDItemProvider != null) methodJJDItemProvider.dispose();
		if (relationJJDItemProvider != null) relationJJDItemProvider.dispose();
		if (agregationJJDItemProvider != null) agregationJJDItemProvider.dispose();
		if (inheritanceJJDItemProvider != null) inheritanceJJDItemProvider.dispose();
		if (containmentJJDItemProvider != null) containmentJJDItemProvider.dispose();
		if (associationJJDItemProvider != null) associationJJDItemProvider.dispose();
		if (implementJJDItemProvider != null) implementJJDItemProvider.dispose();
	}

}
